library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown)         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("DQL Query : ")         print(sqlQuery)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown)         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown)         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown[0])         return(IdOfSelectedRegionInTheDropDown[0])     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown[1])         return(IdOfSelectedRegionInTheDropDown[1])     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             conn <- odbcDriverConnect(connectionString)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown[1])         id <- IdOfSelectedRegionInTheDropDown[1]         print("GetCurrentSelectedEmissionsRegionId: Returning : ")         print(id)         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         print("GetCurrentMarginalEmissionsForSelectedRegion(): Got value returned of ")         print(CurrentSelectedEmissionsRegionId)         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             conn <- odbcDriverConnect(connectionString)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         print("input$DropDownSelectedRegionMappingID : ")         print(input$DropDownSelectedRegionMappingID)         print("connectionString : ")         print(connectionString)         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         print("Int version of input$DropDownSelectedRegionMappingID : ")         print(IdOfRegionInTheSelectedDropDown)                 MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)         print("GetMarketWeatherEmissionsRegionMapping: SQL Query : ")         print(MarketWeatherEmissionsRegionMappingQuery)         conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         print("GetMarketWeatherEmissionsRegionMapping, returning frame of : ")         print(dfMarketWeatherEmissionsRegionMapping)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          print("GetCurrentSelectedEmissionsRegionId, id : ")         print(IdOfSelectedRegionInTheDropDown[1,1])         id <- IdOfSelectedRegionInTheDropDown[1,1]         print("GetCurrentSelectedEmissionsRegionId: Returning : ")         print(id)         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         print("Entering GetCurrentMarginalEmissionsForSelectedRegion() : ")         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         print("GetCurrentMarginalEmissionsForSelectedRegion(): Got value returned of ")         print(CurrentSelectedEmissionsRegionId)         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         print("SQL Query : ")         print(sqlQuery)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         print("GetCurrentMarginalEmissionsForSelectedRegion, Emissions : ")         print(CurrentmarginalEmissions)         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             conn <- odbcDriverConnect(connectionString)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['Temperature_Celcius']         return(CurrentmarginalEmissions)     })     GetCurrentMarginalEmissionsReactive <- reactive({             sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [RegionMappingID] = '%d'", IdOfRegionInTheSelectedDropDown)             conn <- odbcDriverConnect(connectionString)             df <- sqlQuery(conn, sqlQuery)             customers <- df             customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)             customers         return(Sys.time())     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(GetCurrentWeatherForSelectedRegion()), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(currentTemperature, " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentValue <- df['Temperature_Celcius']         Print("GetCurrentWeatherForSelectedRegion: Got this value for Temperature_Celcius: ")         Print(CurrentValue)         return(CurrentValue)     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(GetCurrentWeatherForSelectedRegion(), " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         return(IdOfSelectedRegionInTheDropDown)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentValue <- df['Temperature_Celcius']         Print("GetCurrentWeatherForSelectedRegion: Got this value for Temperature_Celcius: ")         Print(CurrentValue)         return(CurrentValue)     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(GetCurrentWeatherForSelectedRegion(), " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentValue <- df['Temperature_Celcius']         Print("GetCurrentWeatherForSelectedRegion: Got this value for Temperature_Celcius: ")         Print(CurrentValue)         return(CurrentValue)     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(GetCurrentWeatherForSelectedRegion(), " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentValue <- df['Temperature_Celcius']         return(CurrentValue)     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(GetCurrentWeatherForSelectedRegion(), " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
library(shiny) library(leaflet) library(shinydashboard) library(dygraphs) library(xts) library(RODBC) library(RColorBrewer) # *** Usage Instructions:  #   1) Restore the sample Sql Azure Database File in the SampleSqlAzureDatabaseFile folder to a SQL Azure Server in your Azure Subscription.  #      If you don't have a SQL Azure Server yet, create one as per https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started #   2) Update the connectionString variable below to replace  smartgridsqlserver with the name of your SQL Azure Server #   3) Run the solution locally with the "local" connection string uncommented. The solution will launch a ShinyApp application which connects to your SQL Azure database and visualises the data #   4) To deploy the application to ShinyApps.io, uncomment the connection string commented as "Uncomment this line when deploying to Shiny" and publish.  #   5) Tailor to your own needs and data.  ui <- dashboardPage(   dashboardHeader(title = "Smart Energy Dashboard"),   dashboardSidebar(     uiOutput("dropDownMenuSelections")   ),   dashboardBody(   fluidRow(     fluidRow(       # The World Map       leafletOutput("map"),       # The Status Boxes       infoBoxOutput("RenewablesPercentrageBox"),       infoBoxOutput("NumberOfActiveCustomers"),       infoBoxOutput("MarketPrice")     ),     fluidRow(         #The charts         dygraphOutput("EmissionsDataSeriesChart", width = "98%")         , dygraphOutput("WeatherDataSeriesChart", width = "98%")     )   ),   p() ) ) server <- function(input, output, session) {     ##The Connection Stirngs: These need to be different depending on whether you are running the application locally, or deploying to ShinyApps.      #Uncomment this line when deploying to Shiny         #connectionString <- 'Driver=FreeTDS;TDS_Version=8.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     #Uncomment this line when running Locally     connectionString <- 'Driver=SQL Server Native Client 11.0;Server=smartgridsqlserver.database.windows.net,1433;Database=SmartEnergyStackDbProd;Uid=SmartGridAdmin@smartgridsqlserver;Pwd=Energy10!;Encrypt=yes;'     conn <- odbcDriverConnect(connectionString)     #Hardcoding some variables to demonstrate data binding from SQL Azure in R. Tailor to your own solution. See the sample SQL Azure database to see the data these relate to.      defaultRegionMappingID <- 5     regionId <- defaultRegionMappingID     EmissionsRegionId <- 5     WeatherRegionId <- 1     regionName <- "US_PJM"     #Populate the drop down menu with regions available in the database     RegionDropDownSqlQuery <- sprintf("SELECT [RegionMappingID],[FriendlyName],[MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] ORDER BY [RegionMappingID]")     dfRegionDropDown <- sqlQuery(conn, RegionDropDownSqlQuery)     dfRegionDropDownDatasetAsArray <- cbind(dfRegionDropDown)     DropdownCoices = setNames(dfRegionDropDownDatasetAsArray$RegionMappingID, dfRegionDropDownDatasetAsArray$FriendlyName)     output$dropDownMenuSelections <-     renderUI({         selectInput("DropDownSelectedRegionMappingID", "Select Region", choices = DropdownCoices)     })         ##Generate the Map showing customers on their location on the World Map, along with the current status     #Retrieve the Customers data form the SQL Azure databsae to display a map. This data contains Latitude and Longitude columns.          sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion]", regionId)     df <- sqlQuery(conn, sqlQuery)     customers <- df     customers$CustomerStatus <- sprintf("Customer Name: %s. \n Current Marginal Emissions: %s gCO2 / kWh", customers$FriendlyName, customers$MarginalCO2Intensity_gCO2kWh)     customers     #Render the Customer geo-spacial data onto the Leaflet World Map     output$map <- renderLeaflet({         leaflet() %>%         addTiles() %>%         addMarkers(data = customers, ~ Longitude, ~ Latitude, popup = ~CustomerStatus)     })     ##Create the three infoBoxOutput "Status Boxes" - Static Select     MarginalSqlQuery <- sprintf("SELECT [MarginalCO2Intensity_gCO2kWh] FROM [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", EmissionsRegionId)     dfMarginalCO2 <- sqlQuery(conn, MarginalSqlQuery)     currentMarginalCO2 <- dfMarginalCO2['MarginalCO2Intensity_gCO2kWh']     WeatherSqlQuery <- sprintf("SELECT [Temperature_Celcius] FROM [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", WeatherRegionId)     dfWeather <- sqlQuery(conn, WeatherSqlQuery)     currentTemperature <- dfWeather['Temperature_Celcius']     MarketPriceSqlQuery <- sprintf("SELECT [Price] FROM [dbo].[MostRecentMarketDataPointForEachRegion] WHERE [MarketRegionID] = '%d'", regionId)     dfMarketPrice <- sqlQuery(conn, MarketPriceSqlQuery)     currentMarketPrice <- dfMarketPrice['Price']     numberOfCustomers <- nrow(customers)     ##Create the three infoBoxOutput "Status Boxes" - Reactive Select     GetMarketWeatherEmissionsRegionMapping <- reactive({         if (is.null(input$DropDownSelectedRegionMappingID)) {             IdOfRegionInTheSelectedDropDown = defaultRegionMappingID         } else {             IdOfRegionInTheSelectedDropDown = as.numeric(input$DropDownSelectedRegionMappingID)         }         MarketWeatherEmissionsRegionMappingQuery <- sprintf("SELECT [MarketRegionID],[WeatherRegionID],[EmissionsRegionID] FROM [dbo].[MarketWeatherEmissionsRegionMapping] WHERE [RegionMappingID] = '%s'", IdOfRegionInTheSelectedDropDown)                 conn <- odbcDriverConnect(connectionString)         dfMarketWeatherEmissionsRegionMapping <- sqlQuery(conn, MarketWeatherEmissionsRegionMappingQuery)         return(dfMarketWeatherEmissionsRegionMapping)     })     GetCurrentSelectedEmissionsRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['EmissionsRegionID']          id <- IdOfSelectedRegionInTheDropDown[1,1]         return(id)     })     GetCurrentSelectedWeatherRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['WeatherRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentSelectedmarketRegionId <- reactive({         dfMarketWeatherEmissionsRegionMapping = GetMarketWeatherEmissionsRegionMapping()         IdOfSelectedRegionInTheDropDown = dfMarketWeatherEmissionsRegionMapping['MarketRegionID']         id <- IdOfSelectedRegionInTheDropDown[1, 1]         return(id)     })     GetCurrentMarginalEmissionsForSelectedRegion <- reactive({         CurrentSelectedEmissionsRegionId = GetCurrentSelectedEmissionsRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentEmissionsDataPointForEachRegion] WHERE [EmissionsRegionID] = '%d'", CurrentSelectedEmissionsRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentmarginalEmissions <- df['MarginalCO2Intensity_gCO2kWh']         return(CurrentmarginalEmissions)     })     GetCurrentWeatherForSelectedRegion <- reactive({         CurrentSelectedWeatherRegionId = GetCurrentSelectedWeatherRegionId()         sqlQuery <- sprintf("select * from  [dbo].[MostRecentWeatherDataPointForEachRegion] WHERE [WeatherRegionID] = '%d'", CurrentSelectedWeatherRegionId)         conn <- odbcDriverConnect(connectionString)         df <- sqlQuery(conn, sqlQuery)         CurrentValue <- df['Temperature_Celcius']         return(CurrentValue)     })     # Marginal CO2 Box     output$RenewablesPercentrageBox <- renderInfoBox({         infoBox(         "Marginal Emissions", paste0(GetCurrentMarginalEmissionsForSelectedRegion(), " gCO2 / kWh"), icon = icon("list"),         color = "green", fill = TRUE       )     })     # Number of Customers Box     output$NumberOfActiveCustomers <- renderInfoBox({         infoBox(         "Number Of Active Regions", paste0(numberOfCustomers), icon = icon("credit-card"),         color = "purple", fill = TRUE       )     })     # Current Market Price     output$MarketPrice <- renderInfoBox({         infoBox(         "Current Temperature", paste0(GetCurrentWeatherForSelectedRegion(), " Degrees Celcius"), icon = icon("thumbs-up"),         color = "yellow", fill = TRUE       )     })     ##Generate the data charts displaying time series data     #Time Series Price Data     emissionsSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[SystemWideCO2Intensity_gCO2kWh],[MarginalCO2Intensity_gCO2kWh] FROM [dbo].[CarbonEmissionsDataPoints] WHERE [EmissionsRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", EmissionsRegionId)     dbResults <- sqlQuery(conn, emissionsSqlQuery)     dataset <- dbResults     datasetAsArray <- cbind(dataset)     emissionsArray <- datasetAsArray[, c("DateTimeUTC", "SystemWideCO2Intensity_gCO2kWh", "MarginalCO2Intensity_gCO2kWh")]     emissionsArrayAsXts <- xts(emissionsArray[, -1], order.by = emissionsArray[, 1])     output$EmissionsDataSeriesChart <- renderDygraph({     dygraph(emissionsArrayAsXts, main = "Carbon Emissions") %>%         dySeries("SystemWideCO2Intensity_gCO2kWh", label = "SystemWideCO2Intensity_gCO2kWh", fillGraph = TRUE) %>%         dySeries("MarginalCO2Intensity_gCO2kWh", label = "MarginalCO2Intensity_gCO2kWh", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%     dyRangeSelector(height = 20) })     ##Time Series Weather Data     weatherSqlQuery <- sprintf("SELECT TOP (1000) [DateTimeUTC],[Temperature_Celcius] ,[DewPoint_Metric],[WindSpeed_Metric] FROM [dbo].[WeatherDataPoints] WHERE [WeatherRegionID] = '%d' ORDER BY [DateTimeUTC] DESC", WeatherRegionId)     dbweatherResults <- sqlQuery(conn, weatherSqlQuery)     weatherDataset <- dbweatherResults     weatherDatasetAsArray <- cbind(weatherDataset)     weatherArray <- weatherDatasetAsArray[, c("DateTimeUTC", "Temperature_Celcius", "WindSpeed_Metric")]     weatherArrayAsXts <- xts(weatherArray[, -1], order.by = weatherArray[, 1])     output$WeatherDataSeriesChart <- renderDygraph({     dygraph(weatherArrayAsXts, main = "Weather: Wind Speeds and Temperature") %>%         dySeries("Temperature_Celcius", label = "Temperature (Celcius)", fillGraph = TRUE) %>%         dySeries("WindSpeed_Metric", label = "WindSpeed Kmph", drawPoints = TRUE, strokePattern = "dashed") %>%         dyOptions(stackedGraph = FALSE) %>%         dyRangeSelector(height = 20)     })     close(conn) # Close the connection } shinyApp(ui, server)
